const admin = require("firebase-admin");
const cron = require("node-cron");

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
const serviceAccount = require("./serviceAccountKey.json");

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://beautysalon-7fba7.firebaseio.com" // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
});

const db = admin.firestore();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendNotification(userId, fcmToken, appointmentDate) {
    const message = {
        notification: {
            title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!",
            body: `–£ –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ ${appointmentDate}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ!`
        },
        token: fcmToken
    };

    try {
        const response = await admin.messaging().send(message);
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, response);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤
async function checkAppointments() {
    const today = new Date();
    today.setDate(today.getDate() + 1); // –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    const tomorrowStr = today.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

    try {
        // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        const clientsSnapshot = await db.collection("Client").get();

        if (clientsSnapshot.empty) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ.");
            return;
        }

        // 2Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ "MyRecords"
        clientsSnapshot.forEach(async (clientDoc) => {
            const userId = clientDoc.id;
            const clientData = clientDoc.data();
            const fcmToken = clientData.fcnTokenUser; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å FCM-—Ç–æ–∫–µ–Ω

            if (!fcmToken) {
                console.log(`‚ö†Ô∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ ${userId} –Ω–µ—Ç FCM-—Ç–æ–∫–µ–Ω–∞`);
                return;
            }

            // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            const recordsRef = db.collection(`Client/${userId}/MyRecords`);
            const recordsSnapshot = await recordsRef.get();

            if (recordsSnapshot.empty) {
                console.log(`‚ÑπÔ∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ ${userId} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.`);
                return;
            }

            // 4Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ creationDate
            recordsSnapshot.forEach(async (recordDoc) => {
                const recordData = recordDoc.data();

                let creationDateStr;
                if (recordData.creationDate.toDate) {
                    // –ï—Å–ª–∏ creationDate ‚Äî —ç—Ç–æ Timestamp
                    creationDateStr = recordData.creationDate.toDate().toISOString().split("T")[0];
                } else {
                    // –ï—Å–ª–∏ creationDate —É–∂–µ —Å—Ç—Ä–æ–∫–∞ (YYYY-MM-DD)
                    creationDateStr = recordData.creationDate;
                }

                if (creationDateStr === tomorrowStr) {
                    await sendNotification(userId, fcmToken, creationDateStr);
                }
            });
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–µ–π:", error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
cron.schedule("0 9 * * *", () => {
    console.log("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...");
    checkAppointments();
});

console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...");
checkAppointments(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∞